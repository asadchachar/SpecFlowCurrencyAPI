// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCurrencyAPI.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Test Currency Conversion API", Description="\tIn order to verify currency API works fine\r\n\tWe want to input *toCurrency*, *fro" +
        "mCurrency* and *amount* to be converted ", SourceFile="Features\\CurrencyConversion.feature", SourceLine=0)]
    public partial class TestCurrencyConversionAPIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CurrencyConversion.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Test Currency Conversion API", "\tIn order to verify currency API works fine\r\n\tWe want to input *toCurrency*, *fro" +
                    "mCurrency* and *amount* to be converted ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount converts successfully", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenCurrencyAmount"}, SourceLine=5)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenCurrencyAmount"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two currencies and amount converts successfully", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I have Initialized API Service call for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("I want to convert 100.5 SEK to NOK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.When("Currency Conversion API is Invoked for given data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("Verify that the response after conversion is valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer(string amount, string fromCurrency, string toCurrency, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountGETRequest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("fromCurrency", fromCurrency);
            argumentsOfScenario.Add("toCurrency", toCurrency);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two currencies and amount converts successfully with data fr" +
                    "om fixer", null, tagsOfScenario, argumentsOfScenario);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given("I have Initialized API Service call for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.And(string.Format("I want to convert {0} {1} to {2}", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.When("Currency Conversion API is Invoked for given data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then("Verify that the response after conversion is valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount converts successfully with data fr" +
            "om fixer, 1587", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountGETRequest"}, SourceLine=20)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer_1587()
        {
#line 14
this.ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer("1587", "USD", "PKR", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount converts successfully with data fr" +
            "om fixer, 169000", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountGETRequest"}, SourceLine=20)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer_169000()
        {
#line 14
this.ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer("169000", "NOK", "EUR", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount converts successfully with data fr" +
            "om fixer, 89000", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountGETRequest"}, SourceLine=20)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer_89000()
        {
#line 14
this.ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer("89000", "NOK", "SEK", ((string[])(null)));
#line hidden
        }
        
        public virtual void ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully(string fromCurrency, string toCurrency, string amount, string responseStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountPOSTRequest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fromCurrency", fromCurrency);
            argumentsOfScenario.Add("toCurrency", toCurrency);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("responseStatus", responseStatus);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify Given two currencies and amount converts successfully", null, tagsOfScenario, argumentsOfScenario);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given("I have Initialized API Service call for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.And(string.Format("I want to convert {0} {1} {2}", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.When("When I invoke Service to convert given amount between two currencies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then(string.Format("Verify that the responseCode is {0}", responseStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify Given two currencies and amount converts successfully, Variant 0", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountPOSTRequest"}, SourceLine=32)]
        public virtual void ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully_Variant0()
        {
#line 26
this.ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully("NOK", "PKR", "10.5", "OK", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify Given two currencies and amount converts successfully, Variant 1", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountPOSTRequest"}, SourceLine=32)]
        public virtual void ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully_Variant1()
        {
#line 26
this.ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully("DKK", "SEK", "44.5", "OK", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify Given two currencies and amount converts successfully, Variant 2", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountPOSTRequest"}, SourceLine=32)]
        public virtual void ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully_Variant2()
        {
#line 26
this.ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully("CCCZ", "SEK", "20.0", "BadRequest", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify Given two currencies and amount converts successfully, Variant 3", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountPOSTRequest"}, SourceLine=32)]
        public virtual void ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully_Variant3()
        {
#line 26
this.ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully("NOK", "BBCC", "22.7", "BadRequest", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify Given two currencies and amount converts successfully, Variant 4", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountPOSTRequest"}, SourceLine=32)]
        public virtual void ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully_Variant4()
        {
#line 26
this.ToVerifyGivenTwoCurrenciesAndAmountConvertsSuccessfully("NOK", "INR", "0", "BadRequest", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies converts successfully", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedOnGivenAmount"}, SourceLine=40)]
        public virtual void ToVerifyThatGivenTwoCurrenciesConvertsSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedOnGivenAmount"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two currencies converts successfully", null, tagsOfScenario, argumentsOfScenario);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
 testRunner.Given("I have Initialized API Service call for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "from",
                            "to",
                            "amount"});
                table1.AddRow(new string[] {
                            "NOK",
                            "PKR",
                            "10.5"});
#line 43
 testRunner.And("I wnat to current following currencies and amount", ((string)(null)), table1, "And ");
#line hidden
#line 46
 testRunner.When("When I invoke Service to convert given amount between two currencies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.Then("Verify that the responseCode is OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void ToVerifyThatGivenTwoInvalidCurrenciesThrowsError(string amount, string fromCurrency, string toCurrency, string responseStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VerifyThatGivenTwoInvalidCurrenciesThrowErrorInGETRequest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("fromCurrency", fromCurrency);
            argumentsOfScenario.Add("toCurrency", toCurrency);
            argumentsOfScenario.Add("responseStatus", responseStatus);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two Invalid currenciesThrows error", null, tagsOfScenario, argumentsOfScenario);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given("I have Initialized API Service call for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
 testRunner.And(string.Format("I want to convert {0} {1} to {2}", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.When("Currency Conversion API is Invoked for given data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then(string.Format("Verify that the responseCode is {0}", responseStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two Invalid currenciesThrows error, 1587", new string[] {
                "VerifyThatGivenTwoInvalidCurrenciesThrowErrorInGETRequest"}, SourceLine=57)]
        public virtual void ToVerifyThatGivenTwoInvalidCurrenciesThrowsError_1587()
        {
#line 51
this.ToVerifyThatGivenTwoInvalidCurrenciesThrowsError("1587", "Dummy", "AAA", "BadRequest", ((string[])(null)));
#line hidden
        }
        
        public virtual void ToVerifyThatAnyRequestWithInvalidAPIKeyInHeaderWillThrow401UnAuthorizedErrorResposeFromServer(string amount, string fromCurrency, string toCurrency, string responseStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VerifyThatCallingCurrencyConversionAPIWithoutAPIKeyThrowsUNAUTHORIZEDErrorCode"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("fromCurrency", fromCurrency);
            argumentsOfScenario.Add("toCurrency", toCurrency);
            argumentsOfScenario.Add("responseStatus", responseStatus);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that any request with invalid API key in header will throw 401 UnAuthor" +
                    "ized Error respose from server", null, tagsOfScenario, argumentsOfScenario);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given("API Initialization without api key for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.And(string.Format("I want to convert {0} {1} to {2}", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.When("Currency Conversion API is Invoked for given data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then(string.Format("Verify that the responseCode is {0}", responseStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that any request with invalid API key in header will throw 401 UnAuthor" +
            "ized Error respose from server, 1587", new string[] {
                "VerifyThatCallingCurrencyConversionAPIWithoutAPIKeyThrowsUNAUTHORIZEDErrorCode"}, SourceLine=70)]
        public virtual void ToVerifyThatAnyRequestWithInvalidAPIKeyInHeaderWillThrow401UnAuthorizedErrorResposeFromServer_1587()
        {
#line 63
this.ToVerifyThatAnyRequestWithInvalidAPIKeyInHeaderWillThrow401UnAuthorizedErrorResposeFromServer("1587", "NOK", "AED", "Unauthorized", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount are exchanged successfully", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountAndCurrenciesAmountCore"}, SourceLine=74)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountAreExchangedSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmountAndCurrenciesAmountCore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two currencies and amount are exchanged successfully", null, tagsOfScenario, argumentsOfScenario);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
 testRunner.Given("I have Initialized API Service call for fixer Currency Conversion APIs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.And("I want to convert 100.5 SEK PKR", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.When("I call Currency Conversion API on above given data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.Then("Verify that the response after conversion contains success as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.And("Verify that response after conversion contains valid converted result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void ToVerifyGivenTwoCurrenciesAmountConvertsSuccessfully(string fromCurrency, string toCurrency, string amount, string responseStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedIntoGivenAmountPOSTRequest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fromCurrency", fromCurrency);
            argumentsOfScenario.Add("toCurrency", toCurrency);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("responseStatus", responseStatus);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify Given two currencies amount converts successfully", null, tagsOfScenario, argumentsOfScenario);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
 testRunner.Given("I have Initialized API Service call for fixer Currency Conversion APIs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.And(string.Format("I want to convert {0} {1} {2}", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.When("I Convert above given currencies data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then("Verify that the response after conversion contains success as true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify Given two currencies amount converts successfully, NOK", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedIntoGivenAmountPOSTRequest"}, SourceLine=89)]
        public virtual void ToVerifyGivenTwoCurrenciesAmountConvertsSuccessfully_NOK()
        {
#line 83
this.ToVerifyGivenTwoCurrenciesAmountConvertsSuccessfully("NOK", "PKR", "10.5", "OK", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
