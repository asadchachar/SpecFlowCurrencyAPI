// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCurrencyAPI.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Test Currency Conversion API", Description="\tIn order to verify currency API works fine\r\n\tWe want to input *toCurrency*, *fro" +
        "mCurrency* and *amount* to be converted ", SourceFile="Features\\CurrencyConversion.feature", SourceLine=0)]
    public partial class TestCurrencyConversionAPIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CurrencyConversion.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Test Currency Conversion API", "\tIn order to verify currency API works fine\r\n\tWe want to input *toCurrency*, *fro" +
                    "mCurrency* and *amount* to be converted ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and decimal amount converts successfully", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmount"}, SourceLine=5)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndDecimalAmountConvertsSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedAsPerGivenAmount"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two currencies and decimal amount converts successfully", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("API Initialization for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "from",
                            "to",
                            "amount"});
                table1.AddRow(new string[] {
                            "USD",
                            "PKR",
                            "16.98"});
                table1.AddRow(new string[] {
                            "EUR",
                            "INR",
                            "100.09"});
#line 8
 testRunner.And("I have following data", ((string)(null)), table1, "And ");
#line hidden
#line 12
 testRunner.When("Currency Conversion API is Invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies converts successfully", new string[] {
                "VerifyThatGivenTwoCurrenciesAreConvertedOnGivenAmount"}, SourceLine=16)]
        public virtual void ToVerifyThatGivenTwoCurrenciesConvertsSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "VerifyThatGivenTwoCurrenciesAreConvertedOnGivenAmount"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two currencies converts successfully", null, tagsOfScenario, argumentsOfScenario);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("API Initialization for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "from",
                            "to",
                            "amount"});
                table2.AddRow(new string[] {
                            "NOK",
                            "PKR",
                            "10.5"});
                table2.AddRow(new string[] {
                            "DKK",
                            "SEK",
                            "44.5"});
#line 19
 testRunner.And("I have following data for POST Request", ((string)(null)), table2, "And ");
#line hidden
#line 23
 testRunner.When("POST API is invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("the response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void VerifyCurrencyConversionPOSTAPIWorksFineScenarioOutline(string from, string to, string amount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TestPOSTReqestScenarioOutline"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("from", from);
            argumentsOfScenario.Add("to", to);
            argumentsOfScenario.Add("amount", amount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Currency Conversion POST API works fine Scenario Outline", null, tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given("API Initialization for fixer Currency Conversion API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.And(string.Format("I have this data for POST Request {0}, {1} and {2}", from, to, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.When("POST API is invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("the response code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify Currency Conversion POST API works fine Scenario Outline, NOK", new string[] {
                "TestPOSTReqestScenarioOutline"}, SourceLine=35)]
        public virtual void VerifyCurrencyConversionPOSTAPIWorksFineScenarioOutline_NOK()
        {
#line 28
this.VerifyCurrencyConversionPOSTAPIWorksFineScenarioOutline("NOK", "PKR", "10.5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify Currency Conversion POST API works fine Scenario Outline, DKK", new string[] {
                "TestPOSTReqestScenarioOutline"}, SourceLine=35)]
        public virtual void VerifyCurrencyConversionPOSTAPIWorksFineScenarioOutline_DKK()
        {
#line 28
this.VerifyCurrencyConversionPOSTAPIWorksFineScenarioOutline("DKK", "SEK", "44.5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify Currency Conversion POST API works fine Scenario Outline, PKR", new string[] {
                "TestPOSTReqestScenarioOutline"}, SourceLine=35)]
        public virtual void VerifyCurrencyConversionPOSTAPIWorksFineScenarioOutline_PKR()
        {
#line 28
this.VerifyCurrencyConversionPOSTAPIWorksFineScenarioOutline("PKR", "INR", "90.8", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
